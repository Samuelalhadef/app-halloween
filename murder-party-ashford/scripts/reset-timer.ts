/**
 * Script pour r√©initialiser le chronom√®tre √† 75 minutes
 * Usage: npx tsx scripts/reset-timer.ts
 */

import { getTursoClient } from '../lib/db/base';

const NEW_TIME = 75 * 60; // 75 minutes en secondes

async function resetTimer() {
  try {
    console.log('\n‚è±Ô∏è  R√©initialisation du chronom√®tre √† 75 minutes\n');

    const client = getTursoClient();

    // V√©rifier s'il existe un √©tat de jeu
    console.log('üîç V√©rification de l\'√©tat du jeu...');
    const result = await client.execute('SELECT * FROM game_states LIMIT 1');

    if (result.rows.length === 0) {
      console.log('‚ö†Ô∏è  Aucun √©tat de jeu trouv√©. Cr√©ation d\'un nouvel √©tat...');

      // Cr√©er un nouvel √©tat
      await client.execute({
        sql: `INSERT INTO game_states (id, isRunning, timeRemaining, startTime, pausedAt, updatedAt)
              VALUES (?, ?, ?, ?, ?, ?)`,
        args: [
          `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          0,
          NEW_TIME,
          null,
          null,
          new Date().toISOString(),
        ],
      });

      console.log('‚úÖ Nouvel √©tat de jeu cr√©√© avec 75 minutes');
    } else {
      const gameState = result.rows[0];
      console.log(`üìä √âtat actuel: ${Math.floor((gameState.timeRemaining as number) / 60)} minutes`);

      // Mettre √† jour l'√©tat existant
      console.log('üîÑ Mise √† jour du chronom√®tre...');
      await client.execute({
        sql: 'UPDATE game_states SET timeRemaining = ?, isRunning = ?, startTime = ?, pausedAt = ?, updatedAt = ? WHERE id = ?',
        args: [NEW_TIME, 0, null, null, new Date().toISOString(), gameState.id as string],
      });

      console.log('‚úÖ Chronom√®tre r√©initialis√© √† 75 minutes');
    }

    // V√©rifier le r√©sultat
    const finalResult = await client.execute('SELECT * FROM game_states LIMIT 1');
    const finalState = finalResult.rows[0];

    console.log('\nüìä √âTAT FINAL:');
    console.log(`   ‚è±Ô∏è  Temps: ${Math.floor((finalState.timeRemaining as number) / 60)} minutes (${finalState.timeRemaining} secondes)`);
    console.log(`   ‚ñ∂Ô∏è  En cours: ${finalState.isRunning ? 'Oui' : 'Non'}`);
    console.log('\nüéâ R√©initialisation termin√©e avec succ√®s!');
    console.log('');

    process.exit(0);

  } catch (error: any) {
    console.error('\n‚ùå Erreur fatale:', error.message);
    console.error(error);
    process.exit(1);
  }
}

resetTimer();
